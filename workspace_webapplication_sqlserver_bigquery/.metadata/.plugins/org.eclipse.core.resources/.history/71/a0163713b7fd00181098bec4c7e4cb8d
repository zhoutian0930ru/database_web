package google.project2_test1;

import com.google.auth.oauth2.GoogleCredentials;
import com.google.auth.oauth2.ServiceAccountCredentials;
import com.google.cloud.bigquery.BigQuery;
import com.google.cloud.bigquery.BigQueryOptions;
import com.google.cloud.bigquery.FieldValueList;
import com.google.cloud.bigquery.Job;
import com.google.cloud.bigquery.JobId;
import com.google.cloud.bigquery.JobInfo;
import com.google.cloud.bigquery.QueryJobConfiguration;
import com.google.cloud.bigquery.QueryResponse;
import com.google.cloud.bigquery.TableResult;
import java.util.UUID;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class App {
  public static JSONArray main(String... args) throws Exception {
    // [START bigquery_simple_app_client]
    GoogleCredentials credentials;
    String path=App.class.getResource("").getPath();
    File credentialsPath = new File(path+"\\auth.json");
    FileInputStream serviceAccountStream = new FileInputStream(credentialsPath);
    credentials = ServiceAccountCredentials.fromStream(serviceAccountStream);
    serviceAccountStream.close();

    BigQuery bigquery = BigQueryOptions.newBuilder()
                    .setCredentials(credentials)
                    .setProjectId("august-theme-221819")
                    .build()
                    .getService();
    // [END bigquery_simple_app_client]
    // [START bigquery_simple_app_query]
    QueryJobConfiguration queryConfig =
        QueryJobConfiguration.newBuilder(
          "SELECT * " +
          "FROM hw2.departments ")
            // Use standard SQL syntax for queries.
            // See: https://cloud.google.com/bigquery/sql-reference/
            .setUseLegacySql(false)
            .build();

    // Create a job ID so that we can safely retry.
    JobId jobId = JobId.of(UUID.randomUUID().toString());
    Job queryJob = bigquery.create(JobInfo.newBuilder(queryConfig).setJobId(jobId).build());

    // Wait for the query to complete.
    queryJob = queryJob.waitFor();

    // Check for errors
    if (queryJob == null) {
      throw new RuntimeException("Job no longer exists");
    } else if (queryJob.getStatus().getError() != null) {
      // You can also look at queryJob.getStatus().getExecutionErrors() for all
      // errors, not just the latest one.
      throw new RuntimeException(queryJob.getStatus().getError().toString());
    }
    // [END bigquery_simple_app_query]

    // [START bigquery_simple_app_print]
    // Get the results.
    QueryResponse response = bigquery.getQueryResults(jobId);

    TableResult result = queryJob.getQueryResults();
    
    // Print all pages of the results.

    String resultset="none";
    
    int size = result.getSchema().getFields().size();
    
    JSONArray jsonarray = new JSONArray(); 
    
    String output="test";
    for (FieldValueList row : result.iterateAll()) {
    	JSONObject jsonobject=new JSONObject();
    		
    	for(int i=0;i<size;i++) {
    		String name_json = result.getSchema().getFields().get(i).getName();
    		String value_json = row.get(i).getStringValue();
    		
    		jsonobject.put(name_json, value_json);
    	} 
    	jsonarray.put(jsonobject);
    	System.out.print(jsonobject);  
    	
    }


    // [END bigquery_simple_app_print]
     
   
    return jsonarray;
  }

}
